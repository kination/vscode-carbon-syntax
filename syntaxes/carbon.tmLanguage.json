{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Carbon",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#storages"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#punctuations"
		},
		{
			"include": "#types"
		}
	],
	"repository": {
		"string_escaped_char": {
            "patterns": [
                {
                    "match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
                    "name": "constant.character.escape.carbon"
                },
                {
                    "match": "\\\\[^0-7xuUabfnrtv\\'\"]",
                    "name": "invalid.illegal.unknown-escape.carbon"
                }
            ]
        },
        "string_placeholder": {
            "patterns": [
                {
                    "match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
                    "name": "constant.other.placeholder.carbon"
                }
            ]
        },
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.carbon",
					"match": "\\b(if|then|else|while|for|in|as|break|return|var|let|match|case|constraint)\\b"
				},
				{
					"name": "keyword.other.carbon",
					"match": "\\b(import|package|library|api|alias|external|where|returned|library|and)\\b"
				}
			]
		},
		"storages": {
			"patterns": [
				{
					"name": "storage.type.fn.carbon",
					"match": "\\b(fn)\\b"
				},
				{
					"name": "storage.type.impl.carbon",
					"match": "\\b(impl)\\b"
				},
				{
					"name": "storage.type.class.carbon",
					"match": "\\b(class)\\b"
				},
				{
					"name": "storage.type.interface.carbon",
					"match": "\\b(interface)\\b"
				},
				{
					"name": "storage.type.var.carbon",
					"match": "\\b(var)\\b"
				},
				{
					"name": "storage.type.let.carbon",
					"match": "\\b(let)\\b"
				},
				{
					"name": "storage.type.const.carbon",
					"match": "\\b(const)\\b"
				},
				{
					"name": "storage.type.interface.carbon",
					"match": "\\b(interface)\\b"
				},
				{
					"name": "storage.type.choice.carbon",
					"match": "\\b(choice)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "//",
					"end": "\\n",
					"name": "comment.block.empty.tpl"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.carbon",
					"begin": "\"",
					"beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.carbon"
                        }
                    },
					"end": "\"",
					"endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.carbon"
                        }
                    },
					"patterns": [
                        {
                            "include": "#string_escaped_char"
                        },
                        {
                            "include": "#string_placeholder"
                        }
                    ]
				},
				{
					"name": "string.quoted.multiline.carbon",
					"begin": "\"\"\"",
					"end": "\"\"\"",
					"patterns": [
						{
							"name": "constant.character.escape.carbon",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\b(true|false)\\b",
					"name": "constant.bool.carbon"
				},
				{
					"match": "\\b(0[xX][0-9a-fA-F_]*)\\b",
					"name": "constant.numeric.hex.carbon"
				},
				{
					"match": "\\b(([0-9][0-9_]*(\\.[0-9][0-9_]*)?)([eE](\\+|-)?[0-9][0-9_]*)?|[0-9][0-9_]*)[LlFfDd]?\\b",
					"name": "constant.numeric.common.carbon"
				},
				{
					"match": "(\\.[0-9][0-9_]*)([eE](\\+|-)?[0-9][0-9_]*)?[LlFfDd]?\\b",
					"name": "constant.numeric.float.carbon"
				},
				{
					"match": "\\b(null)\\b",
					"name": "constant.other.carbon"
				}
			]
		},
		"punctuations": {
            "patterns": [
                {
                    "match": ":\\s+?(?=(&|bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self|Option|Result|String))",
					"name": "punctuation.separator.type.carbon"
                },
				{
                    "match": ";",
                    "name": "punctuation.terminator.carbon"
                },
				{
                    "match": "\\.(?!\\.\\.)",
                    "name": "punctuation.period.carbon"
                }
			]
		},
		"types": {
			"patterns": [
				{
                    "match": "\\b(bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self|Option|Result)\\b",
					"name": "type.definition.carbon"
                }
			]
		}
	},
	"scopeName": "source.carbon"
}
